
/**
mi18n - https://github.com/Draggable/mi18n
Version: 1.0.2
Author: Draggable https://draggable.io
*/

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).mi18n={})}(this,(function(e){"use strict";const t={},n=Object.freeze({method:"GET",body:""});const s=(e,t)=>{const n=[];e.on("data",(e=>n.push(e))),e.on("end",(()=>{const s=Buffer.concat(n),o={ok:e.statusCode>=200&&e.statusCode<300,status:e.statusCode,statusText:e.statusMessage,headers:new Map(Object.entries(e.headers)),body:s,arrayBuffer:()=>Promise.resolve(s),json:()=>Promise.resolve(JSON.parse(s.toString()))};t(o)}))},o={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}};class a{constructor(e=o){this.langs=Object.create(null),this.loaded=[],this.processConfig(e)}processConfig(e){const{location:t,...n}={...o,...e},s=t.replace(/\/?$/,"/");this.config={location:s,...n};const{override:a,preloaded:i={}}=this.config,r=Object.entries(this.langs).concat(Object.entries(a||i));this.langs=r.reduce(((e,[t,n])=>(e[t]=this.applyLanguage(t,n),e)),{}),this.locale=this.config.locale||this.config.langs[0]}init(e){return this.processConfig({...this.config,...e}),this.setCurrent(this.locale)}addLanguage(e,t={}){t="string"==typeof t?a.processFile(t):t,this.applyLanguage(e,t),this.config.langs.push("locale")}getValue(e,t=this.locale){var n;return(null==(n=this.langs[t])?void 0:n[e])||this.getFallbackValue(e)}getFallbackValue(e){const t=Object.values(this.langs).find((t=>t[e]));return null==t?void 0:t[e]}makeSafe(e){const t={"{":"\\{","}":"\\}","|":"\\|"};return e=e.replace(/[{}|]/g,(e=>t[e])),new RegExp(e,"g")}put(e,t){return this.current[e]=t,t}get(e,t){const n=this;let s=this.getValue(e);if(!s)return;const o=s.match(/\{[^}]+?\}/g);if(t&&o)if("object"==typeof t)for(const a of o){const e=a.substring(1,a.length-1);s=s.replace(n.makeSafe(a),t[e]||"")}else s=s.replace(/\{[^}]+?\}/g,t);return s}static processFile(e){return a.fromFile(e.replace(/\n\n/g,"\n"))}static fromFile(e){const t=e.split("\n"),n={};for(let s,o=0;o<t.length;o++){s=/^(.+?) *?= *?([^\n]+)/.exec(t[o]),s&&(n[s[1]]=s[2].replace(/(^\s+|\s+$)/g,""))}return n}loadLang(e,o=!0){const a=this;return new Promise((function(i,r){if(-1!==a.loaded.indexOf(e)&&o)return a.applyLanguage(a.langs[e]),i(a.langs[e]);return function(e,o={}){const a={...n,...o},i=(e.startsWith("https"),t);return new Promise(((t,n)=>{const o=i.request(e,a,(e=>{s(e,t)}));o.on("error",(e=>n(new Error(e.message)))),(null==a?void 0:a.body)&&o.write(a.body),o.end()}))}([a.config.location,e,a.config.extension].join("")).then((({data:t})=>{const n=a.processFile(t);return a.applyLanguage(e,n),a.loaded.push(e),i(a.langs[e])})).catch((()=>{const t=a.applyLanguage(e);i(t)}))}))}applyLanguage(e,t={}){const n=this.config.override[e]||{},s=this.langs[e]||{};return this.langs[e]={...s,...t,...n},this.langs[e]}get getLangs(){return this.config.langs}async setCurrent(e="en-US"){return await this.loadLang(e),this.locale=e,this.current=this.langs[e],this.current}}const i=new a;e.I18N=a,e.default=i,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
