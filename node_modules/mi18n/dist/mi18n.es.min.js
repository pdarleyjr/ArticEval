
/**
mi18n - https://github.com/Draggable/mi18n
Version: 1.0.2
Author: Draggable https://draggable.io
*/

const http = {};
const defaultOptions = Object.freeze({ method: "GET", body: "" });
function fetch(url, fetchOptions = {}) {
  const options = { ...defaultOptions, ...fetchOptions };
  const handler = url.startsWith("https") ? http : http;
  return new Promise((resolve, reject) => {
    const request = handler.request(url, options, (response) => {
      processResponse(response, resolve);
    });
    request.on("error", (error) => reject(new Error(error.message)));
    if (options == null ? void 0 : options.body) request.write(options.body);
    request.end();
  });
}
const processResponse = (response, onEnd) => {
  const data = [];
  response.on("data", (chunk) => data.push(chunk));
  response.on("end", () => {
    const bodyBuffer = Buffer.concat(data);
    const result = {
      ok: response.statusCode >= 200 && response.statusCode < 300,
      status: response.statusCode,
      statusText: response.statusMessage,
      headers: new Map(Object.entries(response.headers)),
      body: bodyBuffer,
      arrayBuffer: () => Promise.resolve(bodyBuffer),
      json: () => Promise.resolve(JSON.parse(bodyBuffer.toString()))
    };
    onEnd(result);
  });
};
const DEFAULT_CONFIG = {
  extension: ".lang",
  // local or remote directory containing language files
  location: "assets/lang/",
  // list of available locales, handy for populating selector.
  langs: ["en-US"],
  locale: "en-US",
  // init with user's preferred language
  override: {}
};
class I18N {
  /**
   * Process options and start the module
   * @param {Object} options
   */
  constructor(options = DEFAULT_CONFIG) {
    this.langs = /* @__PURE__ */ Object.create(null);
    this.loaded = [];
    this.processConfig(options);
  }
  /**
   * parse and format config
   * @param {Object} options
   */
  processConfig(options) {
    const { location, ...restOptions } = { ...DEFAULT_CONFIG, ...options };
    const parsedLocation = location.replace(/\/?$/, "/");
    this.config = { location: parsedLocation, ...restOptions };
    const { override, preloaded = {} } = this.config;
    const allLangs = Object.entries(this.langs).concat(Object.entries(override || preloaded));
    this.langs = allLangs.reduce((acc, [locale, lang]) => {
      acc[locale] = this.applyLanguage(locale, lang);
      return acc;
    }, {});
    this.locale = this.config.locale || this.config.langs[0];
  }
  /**
   * Load language and set default
   * @param  {Object} options
   * @return {Promise}        resolves language
   */
  init(options) {
    this.processConfig({ ...this.config, ...options });
    return this.setCurrent(this.locale);
  }
  /**
   * Adds a language to the list of available languages
   * @param {String} locale
   * @param {String|Object} lang
   */
  addLanguage(locale, lang = {}) {
    lang = typeof lang === "string" ? I18N.processFile(lang) : lang;
    this.applyLanguage(locale, lang);
    this.config.langs.push("locale");
  }
  /**
   * get a string from a loaded language file
   * @param  {String} key  - the key for the string we are trying to retrieve
   * @param  {String} locale - locale to check for value
   * @return {String} language string or undefined
   */
  getValue(key, locale = this.locale) {
    var _a;
    const value = (_a = this.langs[locale]) == null ? void 0 : _a[key];
    return value || this.getFallbackValue(key);
  }
  /**
   * Find a language that has desired key
   * @param {String} key value key
   * @return {String} found value or undefined
   */
  getFallbackValue(key) {
    const fallbackLang = Object.values(this.langs).find((lang) => lang[key]);
    return fallbackLang == null ? void 0 : fallbackLang[key];
  }
  /**
   * Escape variable syntax
   * @param  {String} str
   * @return {String}     escaped str
   */
  makeSafe(str) {
    const mapObj = {
      "{": "\\{",
      "}": "\\}",
      "|": "\\|"
    };
    str = str.replace(/[{}|]/g, (matched) => mapObj[matched]);
    return new RegExp(str, "g");
  }
  /**
   * Temporarily put a string into the currently loaded language
   * @param  {String} key
   * @param  {String} string
   * @return {String} string in current language
   */
  put(key, string) {
    this.current[key] = string;
    return string;
  }
  /**
   * Parse arguments for the requested string
   * @param  {String} key  the key we use to lookup our translation
   * @param  {multi}  args  string, number or object containing our arguments
   * @return {String}      updated string translation
   */
  get(key, args) {
    const _this = this;
    let value = this.getValue(key);
    if (!value) {
      return;
    }
    const tokens = value.match(/\{[^}]+?\}/g);
    if (args && tokens) {
      if ("object" === typeof args) {
        for (const token of tokens) {
          const key2 = token.substring(1, token.length - 1);
          value = value.replace(_this.makeSafe(token), args[key2] || "");
        }
      } else {
        value = value.replace(/\{[^}]+?\}/g, args);
      }
    }
    return value;
  }
  /**
   * Static method: Process a language file from raw text
   * @param  {String} response
   * @return {Object} processed language
   */
  static processFile(response) {
    return I18N.fromFile(response.replace(/\n\n/g, "\n"));
  }
  /**
   * Static method: Turn raw text from the language files into fancy JSON
   * @param  {String} rawText
   * @return {Object} converted language file
   */
  static fromFile(rawText) {
    const lines = rawText.split("\n");
    const lang = {};
    for (let matches, i = 0; i < lines.length; i++) {
      const regex = /^(.+?) *?= *?([^\n]+)/;
      matches = regex.exec(lines[i]);
      if (matches) {
        lang[matches[1]] = matches[2].replace(/(^\s+|\s+$)/g, "");
      }
    }
    return lang;
  }
  /**
   * Load a remotely stored language file
   * @param  {String} locale
   * @param  {Boolean} useCache
   * @return {Promise}       resolves response
   */
  loadLang(locale, useCache = true) {
    const _this = this;
    return new Promise(function(resolve, reject) {
      if (_this.loaded.indexOf(locale) !== -1 && useCache) {
        _this.applyLanguage(_this.langs[locale]);
        return resolve(_this.langs[locale]);
      } else {
        const langFile = [_this.config.location, locale, _this.config.extension].join("");
        return fetch(langFile).then(({ data: lang }) => {
          const processedFile = _this.processFile(lang);
          _this.applyLanguage(locale, processedFile);
          _this.loaded.push(locale);
          return resolve(_this.langs[locale]);
        }).catch(() => {
          const lang = _this.applyLanguage(locale);
          resolve(lang);
        });
      }
    });
  }
  /**
   * applies overrides from config
   * @param {String} locale
   * @param {Object} lang
   * @return {Object} overriden language
   */
  applyLanguage(locale, lang = {}) {
    const override = this.config.override[locale] || {};
    const existingLang = this.langs[locale] || {};
    this.langs[locale] = { ...existingLang, ...lang, ...override };
    return this.langs[locale];
  }
  /**
   * return currently available languages
   * @return {Object} all configured languages
   */
  get getLangs() {
    return this.config.langs;
  }
  /**
   * Attempt to set the current language to the local provided
   * @param {String}   locale
   * @return {Promise} language
   */
  async setCurrent(locale = "en-US") {
    await this.loadLang(locale);
    this.locale = locale;
    this.current = this.langs[locale];
    return this.current;
  }
}
const mi18n = new I18N();
export {
  I18N,
  mi18n as default
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
