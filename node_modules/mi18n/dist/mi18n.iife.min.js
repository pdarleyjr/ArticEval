
/**
mi18n - https://github.com/Draggable/mi18n
Version: 1.0.2
Author: Draggable https://draggable.io
*/

var mi18n=function(e){"use strict";const t={},s=Object.freeze({method:"GET",body:""});const n=(e,t)=>{const s=[];e.on("data",(e=>s.push(e))),e.on("end",(()=>{const n=Buffer.concat(s),a={ok:e.statusCode>=200&&e.statusCode<300,status:e.statusCode,statusText:e.statusMessage,headers:new Map(Object.entries(e.headers)),body:n,arrayBuffer:()=>Promise.resolve(n),json:()=>Promise.resolve(JSON.parse(n.toString()))};t(a)}))},a={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}};class o{constructor(e=a){this.langs=Object.create(null),this.loaded=[],this.processConfig(e)}processConfig(e){const{location:t,...s}={...a,...e},n=t.replace(/\/?$/,"/");this.config={location:n,...s};const{override:o,preloaded:r={}}=this.config,i=Object.entries(this.langs).concat(Object.entries(o||r));this.langs=i.reduce(((e,[t,s])=>(e[t]=this.applyLanguage(t,s),e)),{}),this.locale=this.config.locale||this.config.langs[0]}init(e){return this.processConfig({...this.config,...e}),this.setCurrent(this.locale)}addLanguage(e,t={}){t="string"==typeof t?o.processFile(t):t,this.applyLanguage(e,t),this.config.langs.push("locale")}getValue(e,t=this.locale){var s;return(null==(s=this.langs[t])?void 0:s[e])||this.getFallbackValue(e)}getFallbackValue(e){const t=Object.values(this.langs).find((t=>t[e]));return null==t?void 0:t[e]}makeSafe(e){const t={"{":"\\{","}":"\\}","|":"\\|"};return e=e.replace(/[{}|]/g,(e=>t[e])),new RegExp(e,"g")}put(e,t){return this.current[e]=t,t}get(e,t){const s=this;let n=this.getValue(e);if(!n)return;const a=n.match(/\{[^}]+?\}/g);if(t&&a)if("object"==typeof t)for(const o of a){const e=o.substring(1,o.length-1);n=n.replace(s.makeSafe(o),t[e]||"")}else n=n.replace(/\{[^}]+?\}/g,t);return n}static processFile(e){return o.fromFile(e.replace(/\n\n/g,"\n"))}static fromFile(e){const t=e.split("\n"),s={};for(let n,a=0;a<t.length;a++){n=/^(.+?) *?= *?([^\n]+)/.exec(t[a]),n&&(s[n[1]]=n[2].replace(/(^\s+|\s+$)/g,""))}return s}loadLang(e,a=!0){const o=this;return new Promise((function(r,i){if(-1!==o.loaded.indexOf(e)&&a)return o.applyLanguage(o.langs[e]),r(o.langs[e]);return function(e,a={}){const o={...s,...a},r=(e.startsWith("https"),t);return new Promise(((t,s)=>{const a=r.request(e,o,(e=>{n(e,t)}));a.on("error",(e=>s(new Error(e.message)))),(null==o?void 0:o.body)&&a.write(o.body),a.end()}))}([o.config.location,e,o.config.extension].join("")).then((({data:t})=>{const s=o.processFile(t);return o.applyLanguage(e,s),o.loaded.push(e),r(o.langs[e])})).catch((()=>{const t=o.applyLanguage(e);r(t)}))}))}applyLanguage(e,t={}){const s=this.config.override[e]||{},n=this.langs[e]||{};return this.langs[e]={...n,...t,...s},this.langs[e]}get getLangs(){return this.config.langs}async setCurrent(e="en-US"){return await this.loadLang(e),this.locale=e,this.current=this.langs[e],this.current}}const r=new o;return e.I18N=o,e.default=r,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}}),e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWkxOG4uaWlmZS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL19fdml0ZS1icm93c2VyLWV4dGVybmFsIiwiLi4vc3JjL2ZldGNoLmpzIiwiLi4vc3JjL21pMThuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHt9IiwiaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJ1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCdcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBPYmplY3QuZnJlZXplKHsgbWV0aG9kOiAnR0VUJywgYm9keTogJycgfSlcbi8qKlxuICogRmV0Y2hlcyBhIHJlc291cmNlIGZyb20gdGhlIG5ldHdvcmsuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIFRoZSBVUkwgdG8gZmV0Y2guXG4gKiBAcGFyYW0ge09iamVjdH0gW2ZldGNoT3B0aW9ucz17fV0gLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGZldGNoIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW2ZldGNoT3B0aW9ucy5oZWFkZXJzXSAtIEhlYWRlcnMgdG8gaW5jbHVkZSBpbiB0aGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZmV0Y2hPcHRpb25zLm1ldGhvZF0gLSBUaGUgSFRUUCBtZXRob2QgdG8gdXNlIChlLmcuLCAnR0VUJywgJ1BPU1QnKS5cbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gW2ZldGNoT3B0aW9ucy5ib2R5XSAtIFRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LlxuICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcmVzcG9uc2Ugb2JqZWN0LlxuICogQHJldHVybiB7Ym9vbGVhbn0gcmV0dXJuLm9rIC0gSW5kaWNhdGVzIGlmIHRoZSByZXNwb25zZSBzdGF0dXMgaXMgaW4gdGhlIHJhbmdlIDIwMC0yOTkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHJldHVybi5zdGF0dXMgLSBUaGUgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHJldHVybi5zdGF0dXNUZXh0IC0gVGhlIEhUVFAgc3RhdHVzIG1lc3NhZ2Ugb2YgdGhlIHJlc3BvbnNlLlxuICogQHJldHVybiB7TWFwPHN0cmluZywgc3RyaW5nPn0gcmV0dXJuLmhlYWRlcnMgLSBUaGUgaGVhZGVycyBvZiB0aGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHJldHVybi5ib2R5IC0gVGhlIGJvZHkgb2YgdGhlIHJlc3BvbnNlIGFzIGEgQnVmZmVyLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKTogUHJvbWlzZTxCdWZmZXI+fSByZXR1cm4uYXJyYXlCdWZmZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSBib2R5IGFzIGFuIEFycmF5QnVmZmVyLlxuICogQHJldHVybiB7ZnVuY3Rpb24oKTogUHJvbWlzZTxPYmplY3Q+fSByZXR1cm4uanNvbiAtIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcHJvbWlzZSByZXNvbHZpbmcgdG8gdGhlIGJvZHkgcGFyc2VkIGFzIEpTT04uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaCh1cmwsIGZldGNoT3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5mZXRjaE9wdGlvbnMgfVxuICBjb25zdCBoYW5kbGVyID0gdXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykgPyBodHRwcyA6IGh0dHBcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBoYW5kbGVyLnJlcXVlc3QodXJsLCBvcHRpb25zLCByZXNwb25zZSA9PiB7XG4gICAgICBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UsIHJlc29sdmUpXG4gICAgfSlcblxuICAgIHJlcXVlc3Qub24oJ2Vycm9yJywgZXJyb3IgPT4gcmVqZWN0KG5ldyBFcnJvcihlcnJvci5tZXNzYWdlKSkpXG4gICAgaWYgKG9wdGlvbnM/LmJvZHkpIHJlcXVlc3Qud3JpdGUob3B0aW9ucy5ib2R5KVxuICAgIHJlcXVlc3QuZW5kKClcbiAgfSlcbn1cblxuY29uc3QgcHJvY2Vzc1Jlc3BvbnNlID0gKHJlc3BvbnNlLCBvbkVuZCkgPT4ge1xuICBjb25zdCBkYXRhID0gW11cbiAgcmVzcG9uc2Uub24oJ2RhdGEnLCBjaHVuayA9PiBkYXRhLnB1c2goY2h1bmspKVxuICByZXNwb25zZS5vbignZW5kJywgKCkgPT4ge1xuICAgIGNvbnN0IGJvZHlCdWZmZXIgPSBCdWZmZXIuY29uY2F0KGRhdGEpXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgb2s6IHJlc3BvbnNlLnN0YXR1c0NvZGUgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1c0NvZGUgPCAzMDAsXG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNNZXNzYWdlLFxuICAgICAgaGVhZGVyczogbmV3IE1hcChPYmplY3QuZW50cmllcyhyZXNwb25zZS5oZWFkZXJzKSksXG4gICAgICBib2R5OiBib2R5QnVmZmVyLFxuICAgICAgYXJyYXlCdWZmZXI6ICgpID0+IFByb21pc2UucmVzb2x2ZShib2R5QnVmZmVyKSxcbiAgICAgIGpzb246ICgpID0+IFByb21pc2UucmVzb2x2ZShKU09OLnBhcnNlKGJvZHlCdWZmZXIudG9TdHJpbmcoKSkpLFxuICAgIH1cbiAgICBvbkVuZChyZXN1bHQpXG4gIH0pXG59XG4iLCJpbXBvcnQgeyBmZXRjaCB9IGZyb20gJy4vZmV0Y2guanMnXG5cbmNvbnN0IERFRkFVTFRfQ09ORklHID0ge1xuICBleHRlbnNpb246ICcubGFuZycsXG4gIC8vIGxvY2FsIG9yIHJlbW90ZSBkaXJlY3RvcnkgY29udGFpbmluZyBsYW5ndWFnZSBmaWxlc1xuICBsb2NhdGlvbjogJ2Fzc2V0cy9sYW5nLycsXG4gIC8vIGxpc3Qgb2YgYXZhaWxhYmxlIGxvY2FsZXMsIGhhbmR5IGZvciBwb3B1bGF0aW5nIHNlbGVjdG9yLlxuICBsYW5nczogWydlbi1VUyddLFxuICBsb2NhbGU6ICdlbi1VUycsIC8vIGluaXQgd2l0aCB1c2VyJ3MgcHJlZmVycmVkIGxhbmd1YWdlXG4gIG92ZXJyaWRlOiB7fSxcbn1cblxuLyoqXG4gKiBNYWluIG1pMThuIGNsYXNzXG4gKiBAY2xhc3MgSTE4TlxuICogQGNsYXNzZGVzYyBtZXRob2RzIGFuZCBkYXRhIHN0b3JlIGZvciBtaTE4blxuICovXG5leHBvcnQgY2xhc3MgSTE4TiB7XG4gIC8qKlxuICAgKiBQcm9jZXNzIG9wdGlvbnMgYW5kIHN0YXJ0IHRoZSBtb2R1bGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSBERUZBVUxUX0NPTkZJRykge1xuICAgIHRoaXMubGFuZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpXG4gICAgdGhpcy5sb2FkZWQgPSBbXVxuICAgIHRoaXMucHJvY2Vzc0NvbmZpZyhvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcnNlIGFuZCBmb3JtYXQgY29uZmlnXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqL1xuICBwcm9jZXNzQ29uZmlnKG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGxvY2F0aW9uLCAuLi5yZXN0T3B0aW9ucyB9ID0geyAuLi5ERUZBVUxUX0NPTkZJRywgLi4ub3B0aW9ucyB9XG4gICAgY29uc3QgcGFyc2VkTG9jYXRpb24gPSBsb2NhdGlvbi5yZXBsYWNlKC9cXC8/JC8sICcvJylcbiAgICB0aGlzLmNvbmZpZyA9IHsgbG9jYXRpb246IHBhcnNlZExvY2F0aW9uLCAuLi5yZXN0T3B0aW9ucyB9XG4gICAgY29uc3QgeyBvdmVycmlkZSwgcHJlbG9hZGVkID0ge30gfSA9IHRoaXMuY29uZmlnXG4gICAgY29uc3QgYWxsTGFuZ3MgPSBPYmplY3QuZW50cmllcyh0aGlzLmxhbmdzKS5jb25jYXQoT2JqZWN0LmVudHJpZXMob3ZlcnJpZGUgfHwgcHJlbG9hZGVkKSlcbiAgICB0aGlzLmxhbmdzID0gYWxsTGFuZ3MucmVkdWNlKChhY2MsIFtsb2NhbGUsIGxhbmddKSA9PiB7XG4gICAgICBhY2NbbG9jYWxlXSA9IHRoaXMuYXBwbHlMYW5ndWFnZShsb2NhbGUsIGxhbmcpXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG4gICAgdGhpcy5sb2NhbGUgPSB0aGlzLmNvbmZpZy5sb2NhbGUgfHwgdGhpcy5jb25maWcubGFuZ3NbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGxhbmd1YWdlIGFuZCBzZXQgZGVmYXVsdFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgIHJlc29sdmVzIGxhbmd1YWdlXG4gICAqL1xuICBpbml0KG9wdGlvbnMpIHtcbiAgICB0aGlzLnByb2Nlc3NDb25maWcoeyAuLi50aGlzLmNvbmZpZywgLi4ub3B0aW9ucyB9KVxuICAgIHJldHVybiB0aGlzLnNldEN1cnJlbnQodGhpcy5sb2NhbGUpXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGxhbmd1YWdlIHRvIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBsYW5ndWFnZXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxvY2FsZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGxhbmdcbiAgICovXG4gIGFkZExhbmd1YWdlKGxvY2FsZSwgbGFuZyA9IHt9KSB7XG4gICAgbGFuZyA9IHR5cGVvZiBsYW5nID09PSAnc3RyaW5nJyA/IEkxOE4ucHJvY2Vzc0ZpbGUobGFuZykgOiBsYW5nXG4gICAgdGhpcy5hcHBseUxhbmd1YWdlKGxvY2FsZSwgbGFuZylcbiAgICB0aGlzLmNvbmZpZy5sYW5ncy5wdXNoKCdsb2NhbGUnKVxuICB9XG5cbiAgLyoqXG4gICAqIGdldCBhIHN0cmluZyBmcm9tIGEgbG9hZGVkIGxhbmd1YWdlIGZpbGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBrZXkgIC0gdGhlIGtleSBmb3IgdGhlIHN0cmluZyB3ZSBhcmUgdHJ5aW5nIHRvIHJldHJpZXZlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbG9jYWxlIC0gbG9jYWxlIHRvIGNoZWNrIGZvciB2YWx1ZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGxhbmd1YWdlIHN0cmluZyBvciB1bmRlZmluZWRcbiAgICovXG4gIGdldFZhbHVlKGtleSwgbG9jYWxlID0gdGhpcy5sb2NhbGUpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMubGFuZ3NbbG9jYWxlXT8uW2tleV1cbiAgICByZXR1cm4gdmFsdWUgfHwgdGhpcy5nZXRGYWxsYmFja1ZhbHVlKGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgbGFuZ3VhZ2UgdGhhdCBoYXMgZGVzaXJlZCBrZXlcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleSB2YWx1ZSBrZXlcbiAgICogQHJldHVybiB7U3RyaW5nfSBmb3VuZCB2YWx1ZSBvciB1bmRlZmluZWRcbiAgICovXG4gIGdldEZhbGxiYWNrVmFsdWUoa2V5KSB7XG4gICAgY29uc3QgZmFsbGJhY2tMYW5nID0gT2JqZWN0LnZhbHVlcyh0aGlzLmxhbmdzKS5maW5kKGxhbmcgPT4gbGFuZ1trZXldKVxuICAgIHJldHVybiBmYWxsYmFja0xhbmc/LltrZXldXG4gIH1cblxuICAvKipcbiAgICogRXNjYXBlIHZhcmlhYmxlIHN5bnRheFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHN0clxuICAgKiBAcmV0dXJuIHtTdHJpbmd9ICAgICBlc2NhcGVkIHN0clxuICAgKi9cbiAgbWFrZVNhZmUoc3RyKSB7XG4gICAgY29uc3QgbWFwT2JqID0ge1xuICAgICAgJ3snOiAnXFxcXHsnLFxuICAgICAgJ30nOiAnXFxcXH0nLFxuICAgICAgJ3wnOiAnXFxcXHwnLFxuICAgIH1cblxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC9be318XS9nLCBtYXRjaGVkID0+IG1hcE9ialttYXRjaGVkXSlcblxuICAgIHJldHVybiBuZXcgUmVnRXhwKHN0ciwgJ2cnKVxuICB9XG5cbiAgLyoqXG4gICAqIFRlbXBvcmFyaWx5IHB1dCBhIHN0cmluZyBpbnRvIHRoZSBjdXJyZW50bHkgbG9hZGVkIGxhbmd1YWdlXG4gICAqIEBwYXJhbSAge1N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSAge1N0cmluZ30gc3RyaW5nXG4gICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIGluIGN1cnJlbnQgbGFuZ3VhZ2VcbiAgICovXG4gIHB1dChrZXksIHN0cmluZykge1xuICAgIHRoaXMuY3VycmVudFtrZXldID0gc3RyaW5nXG5cbiAgICByZXR1cm4gc3RyaW5nXG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYXJndW1lbnRzIGZvciB0aGUgcmVxdWVzdGVkIHN0cmluZ1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGtleSAgdGhlIGtleSB3ZSB1c2UgdG8gbG9va3VwIG91ciB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0gIHttdWx0aX0gIGFyZ3MgIHN0cmluZywgbnVtYmVyIG9yIG9iamVjdCBjb250YWluaW5nIG91ciBhcmd1bWVudHNcbiAgICogQHJldHVybiB7U3RyaW5nfSAgICAgIHVwZGF0ZWQgc3RyaW5nIHRyYW5zbGF0aW9uXG4gICAqL1xuICBnZXQoa2V5LCBhcmdzKSB7XG4gICAgY29uc3QgX3RoaXMgPSB0aGlzXG4gICAgbGV0IHZhbHVlID0gdGhpcy5nZXRWYWx1ZShrZXkpXG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgdG9rZW5zID0gdmFsdWUubWF0Y2goL1xce1tefV0rP1xcfS9nKVxuXG4gICAgaWYgKGFyZ3MgJiYgdG9rZW5zKSB7XG4gICAgICBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBhcmdzKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gdG9rZW4uc3Vic3RyaW5nKDEsIHRva2VuLmxlbmd0aCAtIDEpXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKF90aGlzLm1ha2VTYWZlKHRva2VuKSwgYXJnc1trZXldIHx8ICcnKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xce1tefV0rP1xcfS9nLCBhcmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXRpYyBtZXRob2Q6IFByb2Nlc3MgYSBsYW5ndWFnZSBmaWxlIGZyb20gcmF3IHRleHRcbiAgICogQHBhcmFtICB7U3RyaW5nfSByZXNwb25zZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHByb2Nlc3NlZCBsYW5ndWFnZVxuICAgKi9cbiAgc3RhdGljIHByb2Nlc3NGaWxlKHJlc3BvbnNlKSB7XG4gICAgcmV0dXJuIEkxOE4uZnJvbUZpbGUocmVzcG9uc2UucmVwbGFjZSgvXFxuXFxuL2csICdcXG4nKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGF0aWMgbWV0aG9kOiBUdXJuIHJhdyB0ZXh0IGZyb20gdGhlIGxhbmd1YWdlIGZpbGVzIGludG8gZmFuY3kgSlNPTlxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHJhd1RleHRcbiAgICogQHJldHVybiB7T2JqZWN0fSBjb252ZXJ0ZWQgbGFuZ3VhZ2UgZmlsZVxuICAgKi9cbiAgc3RhdGljIGZyb21GaWxlKHJhd1RleHQpIHtcbiAgICBjb25zdCBsaW5lcyA9IHJhd1RleHQuc3BsaXQoJ1xcbicpXG4gICAgY29uc3QgbGFuZyA9IHt9XG5cbiAgICBmb3IgKGxldCBtYXRjaGVzLCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZWdleCA9IC9eKC4rPykgKj89ICo/KFteXFxuXSspL1xuICAgICAgbWF0Y2hlcyA9IHJlZ2V4LmV4ZWMobGluZXNbaV0pXG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICBsYW5nW21hdGNoZXNbMV1dID0gbWF0Y2hlc1syXS5yZXBsYWNlKC8oXlxccyt8XFxzKyQpL2csICcnKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYW5nXG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhIHJlbW90ZWx5IHN0b3JlZCBsYW5ndWFnZSBmaWxlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gbG9jYWxlXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IHVzZUNhY2hlXG4gICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgIHJlc29sdmVzIHJlc3BvbnNlXG4gICAqL1xuICBsb2FkTGFuZyhsb2NhbGUsIHVzZUNhY2hlID0gdHJ1ZSkge1xuICAgIGNvbnN0IF90aGlzID0gdGhpc1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoX3RoaXMubG9hZGVkLmluZGV4T2YobG9jYWxlKSAhPT0gLTEgJiYgdXNlQ2FjaGUpIHtcbiAgICAgICAgX3RoaXMuYXBwbHlMYW5ndWFnZShfdGhpcy5sYW5nc1tsb2NhbGVdKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5sYW5nc1tsb2NhbGVdKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbGFuZ0ZpbGUgPSBbX3RoaXMuY29uZmlnLmxvY2F0aW9uLCBsb2NhbGUsIF90aGlzLmNvbmZpZy5leHRlbnNpb25dLmpvaW4oJycpXG4gICAgICAgIHJldHVybiBmZXRjaChsYW5nRmlsZSlcbiAgICAgICAgICAudGhlbigoeyBkYXRhOiBsYW5nIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHByb2Nlc3NlZEZpbGUgPSBfdGhpcy5wcm9jZXNzRmlsZShsYW5nKVxuICAgICAgICAgICAgX3RoaXMuYXBwbHlMYW5ndWFnZShsb2NhbGUsIHByb2Nlc3NlZEZpbGUpXG4gICAgICAgICAgICBfdGhpcy5sb2FkZWQucHVzaChsb2NhbGUpXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5sYW5nc1tsb2NhbGVdKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxhbmcgPSBfdGhpcy5hcHBseUxhbmd1YWdlKGxvY2FsZSlcbiAgICAgICAgICAgIHJlc29sdmUobGFuZylcbiAgICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogYXBwbGllcyBvdmVycmlkZXMgZnJvbSBjb25maWdcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxvY2FsZVxuICAgKiBAcGFyYW0ge09iamVjdH0gbGFuZ1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IG92ZXJyaWRlbiBsYW5ndWFnZVxuICAgKi9cbiAgYXBwbHlMYW5ndWFnZShsb2NhbGUsIGxhbmcgPSB7fSkge1xuICAgIGNvbnN0IG92ZXJyaWRlID0gdGhpcy5jb25maWcub3ZlcnJpZGVbbG9jYWxlXSB8fCB7fVxuICAgIGNvbnN0IGV4aXN0aW5nTGFuZyA9IHRoaXMubGFuZ3NbbG9jYWxlXSB8fCB7fVxuICAgIHRoaXMubGFuZ3NbbG9jYWxlXSA9IHsgLi4uZXhpc3RpbmdMYW5nLCAuLi5sYW5nLCAuLi5vdmVycmlkZSB9XG4gICAgcmV0dXJuIHRoaXMubGFuZ3NbbG9jYWxlXVxuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBjdXJyZW50bHkgYXZhaWxhYmxlIGxhbmd1YWdlc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IGFsbCBjb25maWd1cmVkIGxhbmd1YWdlc1xuICAgKi9cbiAgZ2V0IGdldExhbmdzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5sYW5nc1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gc2V0IHRoZSBjdXJyZW50IGxhbmd1YWdlIHRvIHRoZSBsb2NhbCBwcm92aWRlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gICBsb2NhbGVcbiAgICogQHJldHVybiB7UHJvbWlzZX0gbGFuZ3VhZ2VcbiAgICovXG4gIGFzeW5jIHNldEN1cnJlbnQobG9jYWxlID0gJ2VuLVVTJykge1xuICAgIGF3YWl0IHRoaXMubG9hZExhbmcobG9jYWxlKVxuICAgIHRoaXMubG9jYWxlID0gbG9jYWxlXG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5sYW5nc1tsb2NhbGVdXG5cbiAgICByZXR1cm4gdGhpcy5jdXJyZW50XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IEkxOE4oKVxuIl0sIm5hbWVzIjpbImh0dHAiLCJkZWZhdWx0T3B0aW9ucyIsIk9iamVjdCIsImZyZWV6ZSIsIm1ldGhvZCIsImJvZHkiLCJwcm9jZXNzUmVzcG9uc2UiLCJyZXNwb25zZSIsIm9uRW5kIiwiZGF0YSIsIm9uIiwiY2h1bmsiLCJwdXNoIiwiYm9keUJ1ZmZlciIsIkJ1ZmZlciIsImNvbmNhdCIsInJlc3VsdCIsIm9rIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJzdGF0dXNNZXNzYWdlIiwiaGVhZGVycyIsIk1hcCIsImVudHJpZXMiLCJhcnJheUJ1ZmZlciIsIlByb21pc2UiLCJyZXNvbHZlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsInRvU3RyaW5nIiwiREVGQVVMVF9DT05GSUciLCJleHRlbnNpb24iLCJsb2NhdGlvbiIsImxhbmdzIiwibG9jYWxlIiwib3ZlcnJpZGUiLCJJMThOIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidGhpcyIsImNyZWF0ZSIsImxvYWRlZCIsInByb2Nlc3NDb25maWciLCJyZXN0T3B0aW9ucyIsInBhcnNlZExvY2F0aW9uIiwicmVwbGFjZSIsImNvbmZpZyIsInByZWxvYWRlZCIsImFsbExhbmdzIiwicmVkdWNlIiwiYWNjIiwibGFuZyIsImFwcGx5TGFuZ3VhZ2UiLCJpbml0Iiwic2V0Q3VycmVudCIsImFkZExhbmd1YWdlIiwicHJvY2Vzc0ZpbGUiLCJnZXRWYWx1ZSIsImtleSIsIl9hIiwiZ2V0RmFsbGJhY2tWYWx1ZSIsImZhbGxiYWNrTGFuZyIsInZhbHVlcyIsImZpbmQiLCJtYWtlU2FmZSIsInN0ciIsIm1hcE9iaiIsIm1hdGNoZWQiLCJSZWdFeHAiLCJwdXQiLCJzdHJpbmciLCJjdXJyZW50IiwiZ2V0IiwiYXJncyIsIl90aGlzIiwidmFsdWUiLCJ0b2tlbnMiLCJtYXRjaCIsInRva2VuIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiZnJvbUZpbGUiLCJyYXdUZXh0IiwibGluZXMiLCJzcGxpdCIsIm1hdGNoZXMiLCJpIiwiZXhlYyIsImxvYWRMYW5nIiwidXNlQ2FjaGUiLCJyZWplY3QiLCJpbmRleE9mIiwidXJsIiwiZmV0Y2hPcHRpb25zIiwiaGFuZGxlciIsInN0YXJ0c1dpdGgiLCJodHRwcyIsInJlcXVlc3QiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsIndyaXRlIiwiZW5kIiwiZmV0Y2giLCJqb2luIiwidGhlbiIsInByb2Nlc3NlZEZpbGUiLCJjYXRjaCIsImV4aXN0aW5nTGFuZyIsImdldExhbmdzIiwibWkxOG4iXSwibWFwcGluZ3MiOiJtQ0FBZSxNQUFBQSxFQUFBLENBQUEsRUNHVEMsRUFBaUJDLE9BQU9DLE9BQU8sQ0FBRUMsT0FBUSxNQUFPQyxLQUFNLEtBaUN0RCxNQUFBQyxFQUFrQixDQUFDQyxFQUFVQyxLQUNqQyxNQUFNQyxFQUFPLEdBQ2JGLEVBQVNHLEdBQUcsUUFBUUMsR0FBU0YsRUFBS0csS0FBS0QsS0FDOUJKLEVBQUFHLEdBQUcsT0FBTyxLQUNYLE1BQUFHLEVBQWFDLE9BQU9DLE9BQU9OLEdBQzNCTyxFQUFTLENBQ2JDLEdBQUlWLEVBQVNXLFlBQWMsS0FBT1gsRUFBU1csV0FBYSxJQUN4REMsT0FBUVosRUFBU1csV0FDakJFLFdBQVliLEVBQVNjLGNBQ3JCQyxRQUFTLElBQUlDLElBQUlyQixPQUFPc0IsUUFBUWpCLEVBQVNlLFVBQ3pDakIsS0FBTVEsRUFDTlksWUFBYSxJQUFNQyxRQUFRQyxRQUFRZCxHQUNuQ2UsS0FBTSxJQUFNRixRQUFRQyxRQUFRRSxLQUFLQyxNQUFNakIsRUFBV2tCLGNBRXBEdkIsRUFBTVEsRUFBTSxHQUNiLEVDakRHZ0IsRUFBaUIsQ0FDckJDLFVBQVcsUUFFWEMsU0FBVSxlQUVWQyxNQUFPLENBQUMsU0FDUkMsT0FBUSxRQUNSQyxTQUFVLENBQUUsR0FRUCxNQUFNQyxFQUtYLFdBQUFDLENBQVlDLEVBQVVSLEdBQ2ZTLEtBQUFOLE1BQWVqQyxPQUFBd0MsT0FBTyxNQUMzQkQsS0FBS0UsT0FBUyxHQUNkRixLQUFLRyxjQUFjSixFQUNwQixDQU1ELGFBQUFJLENBQWNKLEdBQ04sTUFBQU4sU0FBRUEsS0FBYVcsR0FBZ0IsSUFBS2IsS0FBbUJRLEdBQ3ZETSxFQUFpQlosRUFBU2EsUUFBUSxPQUFRLEtBQ2hETixLQUFLTyxPQUFTLENBQUVkLFNBQVVZLEtBQW1CRCxHQUM3QyxNQUFNUixTQUFFQSxFQUFVWSxVQUFBQSxFQUFZLENBQUEsR0FBT1IsS0FBS08sT0FDcENFLEVBQVdoRCxPQUFPc0IsUUFBUWlCLEtBQUtOLE9BQU9wQixPQUFPYixPQUFPc0IsUUFBUWEsR0FBWVksSUFDekVSLEtBQUFOLE1BQVFlLEVBQVNDLFFBQU8sQ0FBQ0MsR0FBTWhCLEVBQVFpQixNQUMxQ0QsRUFBSWhCLEdBQVVLLEtBQUthLGNBQWNsQixFQUFRaUIsR0FDbENELElBQ04sSUFDSFgsS0FBS0wsT0FBU0ssS0FBS08sT0FBT1osUUFBVUssS0FBS08sT0FBT2IsTUFBTSxFQUN2RCxDQU9ELElBQUFvQixDQUFLZixHQUVJLE9BRFBDLEtBQUtHLGNBQWMsSUFBS0gsS0FBS08sVUFBV1IsSUFDakNDLEtBQUtlLFdBQVdmLEtBQUtMLE9BQzdCLENBT0QsV0FBQXFCLENBQVlyQixFQUFRaUIsRUFBTyxJQUN6QkEsRUFBdUIsaUJBQVRBLEVBQW9CZixFQUFLb0IsWUFBWUwsR0FBUUEsRUFDdERaLEtBQUFhLGNBQWNsQixFQUFRaUIsR0FDdEJaLEtBQUFPLE9BQU9iLE1BQU12QixLQUFLLFNBQ3hCLENBUUQsUUFBQStDLENBQVNDLEVBQUt4QixFQUFTSyxLQUFLTCxjQUVuQixPQURPLE9BQUF5QixFQUFBcEIsS0FBS04sTUFBTUMsU0FBVSxFQUFBeUIsRUFBQUQsS0FDbkJuQixLQUFLcUIsaUJBQWlCRixFQUN2QyxDQU9ELGdCQUFBRSxDQUFpQkYsR0FDVCxNQUFBRyxFQUFlN0QsT0FBTzhELE9BQU92QixLQUFLTixPQUFPOEIsTUFBS1osR0FBUUEsRUFBS08sS0FDakUsT0FBc0IsTUFBZkcsT0FBZSxFQUFBQSxFQUFBSCxFQUN2QixDQU9ELFFBQUFNLENBQVNDLEdBQ1AsTUFBTUMsRUFBUyxDQUNiLElBQUssTUFDTCxJQUFLLE1BQ0wsSUFBSyxPQUtBLE9BRlBELEVBQU1BLEVBQUlwQixRQUFRLFVBQXFCc0IsR0FBQUQsRUFBT0MsS0FFdkMsSUFBSUMsT0FBT0gsRUFBSyxJQUN4QixDQVFELEdBQUFJLENBQUlYLEVBQUtZLEdBR0EsT0FGRi9CLEtBQUFnQyxRQUFRYixHQUFPWSxFQUViQSxDQUNSLENBUUQsR0FBQUUsQ0FBSWQsRUFBS2UsR0FDUCxNQUFNQyxFQUFRbkMsS0FDVixJQUFBb0MsRUFBUXBDLEtBQUtrQixTQUFTQyxHQUMxQixJQUFLaUIsRUFDSCxPQUdJLE1BQUFDLEVBQVNELEVBQU1FLE1BQU0sZUFFM0IsR0FBSUosR0FBUUcsRUFDTixHQUFBLGlCQUFvQkgsRUFDdEIsSUFBQSxNQUFXSyxLQUFTRixFQUFRLENBQzFCLE1BQU1sQixFQUFNb0IsRUFBTUMsVUFBVSxFQUFHRCxFQUFNRSxPQUFTLEdBQ3RDTCxFQUFBQSxFQUFNOUIsUUFBUTZCLEVBQU1WLFNBQVNjLEdBQVFMLEVBQUtmLElBQVEsR0FDM0QsTUFFT2lCLEVBQUFBLEVBQU05QixRQUFRLGNBQWU0QixHQUlsQyxPQUFBRSxDQUNSLENBT0Qsa0JBQU9uQixDQUFZbkQsR0FDakIsT0FBTytCLEVBQUs2QyxTQUFTNUUsRUFBU3dDLFFBQVEsUUFBUyxNQUNoRCxDQU9ELGVBQU9vQyxDQUFTQyxHQUNSLE1BQUFDLEVBQVFELEVBQVFFLE1BQU0sTUFDdEJqQyxFQUFPLENBQUUsRUFFZixJQUFBLElBQVNrQyxFQUFTQyxFQUFJLEVBQUdBLEVBQUlILEVBQU1ILE9BQVFNLElBQUssQ0FFOUNELEVBRGMsd0JBQ0VFLEtBQUtKLEVBQU1HLElBQ3ZCRCxJQUNHbEMsRUFBQWtDLEVBQVEsSUFBTUEsRUFBUSxHQUFHeEMsUUFBUSxlQUFnQixJQUV6RCxDQUVNLE9BQUFNLENBQ1IsQ0FRRCxRQUFBcUMsQ0FBU3RELEVBQVF1RCxHQUFXLEdBQzFCLE1BQU1mLEVBQVFuQyxLQUNkLE9BQU8sSUFBSWYsU0FBUSxTQUFVQyxFQUFTaUUsR0FDcEMsUUFBSWhCLEVBQU1qQyxPQUFPa0QsUUFBUXpELElBQWtCdUQsRUFFekMsT0FEQWYsRUFBTXRCLGNBQWNzQixFQUFNekMsTUFBTUMsSUFDekJULEVBQVFpRCxFQUFNekMsTUFBTUMsSUFHcEIsT0R2S1IsU0FBZTBELEVBQUtDLEVBQWUsSUFDeEMsTUFBTXZELEVBQVUsSUFBS3ZDLEtBQW1COEYsR0FDbENDLEdBQVVGLEVBQUlHLFdBQVcsU0FBV0MsR0FFMUMsT0FBTyxJQUFJeEUsU0FBUSxDQUFDQyxFQUFTaUUsS0FDM0IsTUFBTU8sRUFBVUgsRUFBUUcsUUFBUUwsRUFBS3RELEdBQXFCakMsSUFDeERELEVBQWdCQyxFQUFVb0IsRUFBTyxJQUczQndFLEVBQUF6RixHQUFHLFNBQWtCMEYsR0FBQVIsRUFBTyxJQUFJUyxNQUFNRCxFQUFNRSxhQUN2QyxNQUFUOUQsT0FBUyxFQUFBQSxFQUFBbkMsT0FBYzhGLEVBQUFJLE1BQU0vRCxFQUFRbkMsTUFDekM4RixFQUFRSyxLQUFLLEdBRWpCLENDMEplQyxDQURVLENBQUM3QixFQUFNNUIsT0FBT2QsU0FBVUUsRUFBUXdDLEVBQU01QixPQUFPZixXQUFXeUUsS0FBSyxLQUUzRUMsTUFBSyxFQUFHbEcsS0FBTTRDLE1BQ1AsTUFBQXVELEVBQWdCaEMsRUFBTWxCLFlBQVlMLEdBR3hDLE9BRk11QixFQUFBdEIsY0FBY2xCLEVBQVF3RSxHQUN0QmhDLEVBQUFqQyxPQUFPL0IsS0FBS3dCLEdBQ1hULEVBQVFpRCxFQUFNekMsTUFBTUMsR0FBTyxJQUVuQ3lFLE9BQU0sS0FDQyxNQUFBeEQsRUFBT3VCLEVBQU10QixjQUFjbEIsR0FDakNULEVBQVEwQixFQUFJLEdBR3hCLEdBQ0csQ0FRRCxhQUFBQyxDQUFjbEIsRUFBUWlCLEVBQU8sSUFDM0IsTUFBTWhCLEVBQVdJLEtBQUtPLE9BQU9YLFNBQVNELElBQVcsQ0FBRSxFQUM3QzBFLEVBQWVyRSxLQUFLTixNQUFNQyxJQUFXLENBQUUsRUFFdEMsT0FERkssS0FBQU4sTUFBTUMsR0FBVSxJQUFLMEUsS0FBaUJ6RCxLQUFTaEIsR0FDN0NJLEtBQUtOLE1BQU1DLEVBQ25CLENBTUQsWUFBSTJFLEdBQ0YsT0FBT3RFLEtBQUtPLE9BQU9iLEtBQ3BCLENBT0QsZ0JBQU1xQixDQUFXcEIsRUFBUyxTQUt4QixhQUpNSyxLQUFLaUQsU0FBU3RELEdBQ3BCSyxLQUFLTCxPQUFTQSxFQUNUSyxLQUFBZ0MsUUFBVWhDLEtBQUtOLE1BQU1DLEdBRW5CSyxLQUFLZ0MsT0FDYixFQUdIdUMsTUFBQUEsRUFBZSxJQUFJMUUifQ==
