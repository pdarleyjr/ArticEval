
/**
@draggable/i18n - https://github.com/Draggable/i18n
Version: 1.0.6
Author: Draggable https://draggable.io
*/

"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const e={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}};class t{constructor(t=e){this.langs=Object.create(null),this.loaded=[],this.processConfig(t)}processConfig(t){const{location:n,...s}={...e,...t},a=n.replace(/\/?$/,"/");this.config={location:a,...s};const{override:o,preloaded:r={}}=this.config,i=Object.entries(this.langs).concat(Object.entries(o||r));this.langs=i.reduce(((e,[t,n])=>(e[t]=this.applyLanguage(t,n),e)),{}),this.locale=this.config.locale||this.config.langs[0]}init(e){return this.processConfig({...this.config,...e}),this.setCurrent(this.locale)}addLanguage(e,n={}){n="string"==typeof n?t.processFile(n):n,this.applyLanguage(e,n),this.config.langs.push("locale")}getValue(e,t=this.locale){var n;return(null==(n=this.langs[t])?void 0:n[e])||this.getFallbackValue(e)}getFallbackValue(e){const t=Object.values(this.langs).find((t=>t[e]));return null==t?void 0:t[e]}makeSafe(e){const t={"{":"\\{","}":"\\}","|":"\\|"};return e=e.replace(/[{}|]/g,(e=>t[e])),new RegExp(e,"g")}put(e,t){return this.current[e]=t,t}get(e,t){const n=this;let s=this.getValue(e);if(!s)return;const a=s.match(/\{[^}]+?\}/g);if(t&&a)if("object"==typeof t)for(const o of a){const e=o.substring(1,o.length-1);s=s.replace(n.makeSafe(o),t[e]||"")}else s=s.replace(/\{[^}]+?\}/g,t);return s}static processFile(e){return t.fromFile(e.replace(/\n\n/g,"\n"))}static fromFile(e){const t=e.split("\n"),n={};for(let s,a=0;a<t.length;a++){s=/^(.+?) *?= *?([^\n]+)/.exec(t[a]),s&&(n[s[1]]=s[2].replace(/(^\s+|\s+$)/g,""))}return n}loadLang(e,n=!0){const s=this;return new Promise((function(a,o){if(-1!==s.loaded.indexOf(e)&&n)return s.applyLanguage(s.langs[e]),a(s.langs[e]);return async function(e){try{const t=await fetch(e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const n=e.endsWith(".lang")?"text":"json";return await t[n]()}catch(t){throw t}}([s.config.location,e,s.config.extension].join("")).then((n=>{const o=t.processFile(n);return s.applyLanguage(e,o),s.loaded.push(e),a(s.langs[e])})).catch((t=>{const n=s.applyLanguage(e);a(n)}))}))}applyLanguage(e,t={}){const n=this.config.override[e]||{},s=this.langs[e]||{};return this.langs[e]={...s,...t,...n},this.langs[e]}get getLangs(){return this.config.langs}async setCurrent(e="en-US"){return await this.loadLang(e),this.locale=e,this.current=this.langs[e],this.current}}const n=new t;exports.I18N=t,exports.default=n;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
