
/**
@draggable/i18n - https://github.com/Draggable/i18n
Version: 1.0.6
Author: Draggable https://draggable.io
*/

var i18n=function(t){"use strict";const e={extension:".lang",location:"assets/lang/",langs:["en-US"],locale:"en-US",override:{}};class n{constructor(t=e){this.langs=Object.create(null),this.loaded=[],this.processConfig(t)}processConfig(t){const{location:n,...s}={...e,...t},a=n.replace(/\/?$/,"/");this.config={location:a,...s};const{override:i,preloaded:r={}}=this.config,o=Object.entries(this.langs).concat(Object.entries(i||r));this.langs=o.reduce(((t,[e,n])=>(t[e]=this.applyLanguage(e,n),t)),{}),this.locale=this.config.locale||this.config.langs[0]}init(t){return this.processConfig({...this.config,...t}),this.setCurrent(this.locale)}addLanguage(t,e={}){e="string"==typeof e?n.processFile(e):e,this.applyLanguage(t,e),this.config.langs.push("locale")}getValue(t,e=this.locale){var n;return(null==(n=this.langs[e])?void 0:n[t])||this.getFallbackValue(t)}getFallbackValue(t){const e=Object.values(this.langs).find((e=>e[t]));return null==e?void 0:e[t]}makeSafe(t){const e={"{":"\\{","}":"\\}","|":"\\|"};return t=t.replace(/[{}|]/g,(t=>e[t])),new RegExp(t,"g")}put(t,e){return this.current[t]=e,e}get(t,e){const n=this;let s=this.getValue(t);if(!s)return;const a=s.match(/\{[^}]+?\}/g);if(e&&a)if("object"==typeof e)for(const i of a){const t=i.substring(1,i.length-1);s=s.replace(n.makeSafe(i),e[t]||"")}else s=s.replace(/\{[^}]+?\}/g,e);return s}static processFile(t){return n.fromFile(t.replace(/\n\n/g,"\n"))}static fromFile(t){const e=t.split("\n"),n={};for(let s,a=0;a<e.length;a++){s=/^(.+?) *?= *?([^\n]+)/.exec(e[a]),s&&(n[s[1]]=s[2].replace(/(^\s+|\s+$)/g,""))}return n}loadLang(t,e=!0){const s=this;return new Promise((function(a,i){if(-1!==s.loaded.indexOf(t)&&e)return s.applyLanguage(s.langs[t]),a(s.langs[t]);return async function(t){try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const n=t.endsWith(".lang")?"text":"json";return await e[n]()}catch(e){throw e}}([s.config.location,t,s.config.extension].join("")).then((e=>{const i=n.processFile(e);return s.applyLanguage(t,i),s.loaded.push(t),a(s.langs[t])})).catch((e=>{const n=s.applyLanguage(t);a(n)}))}))}applyLanguage(t,e={}){const n=this.config.override[t]||{},s=this.langs[t]||{};return this.langs[t]={...s,...e,...n},this.langs[t]}get getLangs(){return this.config.langs}async setCurrent(t="en-US"){return await this.loadLang(t),this.locale=t,this.current=this.langs[t],this.current}}const s=new n;return t.I18N=n,t.default=s,Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}}),t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
